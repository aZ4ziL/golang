{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sejarah GoLang Golang (atau biasa disebut dengan Go) adalah bahasa pemrograman yang dikembangkan di Google oleh Robert Griesemer, Rob Pike, dan Ken Thompson pada tahun 2007 dan mulai diperkenalkan ke publik tahun 2009. Golang didasari oleh bahasa pemrograman seperti C, C++, Python dan Java. Maka dari itu syntaksnya mirip dengan bahasa pemrograman tersebut. Bahasa pemrograman satu ini bisa diketik secara statis dan dapat menghasilkan kode-kode biner pada mesin yang dikompilasikan dengannya. Berasal dari abad ke-21, bahasa pemrograman Golang berusaha menghimpun bahasa-bahasa pemrograman pendahulunya. Pembuatan website, aplikasi maupun software juga bisa menggunakan bahasa pemrograman ini. Fungsi Golang Go memiliki kelebihan dibanding bahasa lainnya, beberapa di antaranya: Mendukung konkurensi di level bahasa dengan pengaplikasian cukup mudah Mendukung pemrosesan data dengan banyak prosesor dalam waktu yang bersamaan (pararel processing) Memiliki garbage collector. Gerbage collector adalah pengumpulan sampah atau merupakan sistem manajemen memori yang membuat pemrogram tidak perlu secara manual membebaskan memori dari objek yang tidak terpakai. Proses kompilasi sangat cepat Bukan bahasa pemrograman yang hirarkial dan bukan strict OOP, memberikan kebebasan ke developer perihal bagaimana cara penulisan kode. Dependensi dan tooling yang disediakan terbilang lengkap. Dukungan komunitas sangat bagus. Banyak tools yang tersedia secara gratis dan open source yang bisa langsung dimanfaatkan. Framework Terpopuler Gin Gonic Gin adalah kerangka kerja web yang ditulis dalam Go (Golang). Ini fitur API seperti martini dengan kinerja yang hingga 40 kali lebih cepat berkat http router. Goji Goji merupakan framework milik Golang dengan fitur request HTTP multiplexer. Fiturnya minimalis dan merupakan salah satu hasil dukungan dari Einhorn. Karena dukungan inilah ada kemungkinan mempunyai web socket assistance. Revel Tampilan fitur yang dimiliki Revel sangat lengkap dan tidak memerlukan pengaturan yang sulit. Pengembangan API menjadi kemampuan khusus milik Revel. Tugasnya memang sangat rumit, namun dengan menggunakan Revel maka kamu tidak membutuhkan dukungan yang berasal dari pihak ketiga. Martini Framework satu ini sangat ringan dan diaktifkan oleh Sinatra. Cara kerjanya berdasarkan exception dealing, routing dan memiliki kemampuan middleware. Kemampuannya dalam mengelola banyak fungsi sudah tidak diragukan lagi. Bahkan ia mampu bekerja sama dengan pihak ketiga. Gocraft Tawaran yang diberikan oleh framewok ini ialah fasilitas routing yang cepat. Bahkan kemampuannya bisa ditingkatkan sesuai dengan yang dibutuhkan. Untuk kamu yang memerlukan kinerja API tinggi, maka framework ini merupakan solusinya. Buffalo Pengelolaan setiap aspek dari front end sampai backend dapat diatasi dengan baik oleh framework ini. Fitur-fitur berupa hot reloading juga dapat digunakan secara otomatis. Transformasi langsung saat menjalankan dev command bisa kamu lakukan secara langsung. Perusahaan Yang Menggunakan Golang","title":"Sejarah GoLang"},{"location":"#sejarah-golang","text":"Golang (atau biasa disebut dengan Go) adalah bahasa pemrograman yang dikembangkan di Google oleh Robert Griesemer, Rob Pike, dan Ken Thompson pada tahun 2007 dan mulai diperkenalkan ke publik tahun 2009. Golang didasari oleh bahasa pemrograman seperti C, C++, Python dan Java. Maka dari itu syntaksnya mirip dengan bahasa pemrograman tersebut. Bahasa pemrograman satu ini bisa diketik secara statis dan dapat menghasilkan kode-kode biner pada mesin yang dikompilasikan dengannya. Berasal dari abad ke-21, bahasa pemrograman Golang berusaha menghimpun bahasa-bahasa pemrograman pendahulunya. Pembuatan website, aplikasi maupun software juga bisa menggunakan bahasa pemrograman ini.","title":"Sejarah GoLang"},{"location":"#fungsi-golang","text":"Go memiliki kelebihan dibanding bahasa lainnya, beberapa di antaranya: Mendukung konkurensi di level bahasa dengan pengaplikasian cukup mudah Mendukung pemrosesan data dengan banyak prosesor dalam waktu yang bersamaan (pararel processing) Memiliki garbage collector. Gerbage collector adalah pengumpulan sampah atau merupakan sistem manajemen memori yang membuat pemrogram tidak perlu secara manual membebaskan memori dari objek yang tidak terpakai. Proses kompilasi sangat cepat Bukan bahasa pemrograman yang hirarkial dan bukan strict OOP, memberikan kebebasan ke developer perihal bagaimana cara penulisan kode. Dependensi dan tooling yang disediakan terbilang lengkap. Dukungan komunitas sangat bagus. Banyak tools yang tersedia secara gratis dan open source yang bisa langsung dimanfaatkan.","title":"Fungsi Golang"},{"location":"#framework-terpopuler","text":"","title":"Framework Terpopuler"},{"location":"#gin-gonic","text":"Gin adalah kerangka kerja web yang ditulis dalam Go (Golang). Ini fitur API seperti martini dengan kinerja yang hingga 40 kali lebih cepat berkat http router.","title":"Gin Gonic"},{"location":"#goji","text":"Goji merupakan framework milik Golang dengan fitur request HTTP multiplexer. Fiturnya minimalis dan merupakan salah satu hasil dukungan dari Einhorn. Karena dukungan inilah ada kemungkinan mempunyai web socket assistance.","title":"Goji"},{"location":"#revel","text":"Tampilan fitur yang dimiliki Revel sangat lengkap dan tidak memerlukan pengaturan yang sulit. Pengembangan API menjadi kemampuan khusus milik Revel. Tugasnya memang sangat rumit, namun dengan menggunakan Revel maka kamu tidak membutuhkan dukungan yang berasal dari pihak ketiga.","title":"Revel"},{"location":"#martini","text":"Framework satu ini sangat ringan dan diaktifkan oleh Sinatra. Cara kerjanya berdasarkan exception dealing, routing dan memiliki kemampuan middleware. Kemampuannya dalam mengelola banyak fungsi sudah tidak diragukan lagi. Bahkan ia mampu bekerja sama dengan pihak ketiga.","title":"Martini"},{"location":"#gocraft","text":"Tawaran yang diberikan oleh framewok ini ialah fasilitas routing yang cepat. Bahkan kemampuannya bisa ditingkatkan sesuai dengan yang dibutuhkan. Untuk kamu yang memerlukan kinerja API tinggi, maka framework ini merupakan solusinya.","title":"Gocraft"},{"location":"#buffalo","text":"Pengelolaan setiap aspek dari front end sampai backend dapat diatasi dengan baik oleh framework ini. Fitur-fitur berupa hot reloading juga dapat digunakan secara otomatis. Transformasi langsung saat menjalankan dev command bisa kamu lakukan secara langsung.","title":"Buffalo"},{"location":"#perusahaan-yang-menggunakan-golang","text":"","title":"Perusahaan Yang Menggunakan Golang"},{"location":"01install_go/","text":"Install Go Sebelum masuk kedalam pembelajaran Go yang sebenarnya, kita harus menginstallnya terlebih dahulu. Untuk mendownload dan menginstallnya kita bisa masuk ke situs resminya https://go.dev/dl/","title":"Install Go"},{"location":"01install_go/#install-go","text":"Sebelum masuk kedalam pembelajaran Go yang sebenarnya, kita harus menginstallnya terlebih dahulu. Untuk mendownload dan menginstallnya kita bisa masuk ke situs resminya https://go.dev/dl/","title":"Install Go"},{"location":"02go_modules/","text":"Go Modules Go modules adalah manajemen depedensi resmi dari Go. Go modules penggunaannya hanya melalui CLI(Command Line Interface) jika di Windows melalui CMD dan di Unix menggunakan Terminal. Inisialisasi Project menggunakan Go modules Konfigurasi go modules mkdir project-name cd project-name go mod init project-name Maka akan terbuat sebuah file dengan nama go.mod yang berisi nama package dan versi golang yang kita pakai. go.mod module project - name go 1.19","title":"Go Modules"},{"location":"02go_modules/#go-modules","text":"Go modules adalah manajemen depedensi resmi dari Go. Go modules penggunaannya hanya melalui CLI(Command Line Interface) jika di Windows melalui CMD dan di Unix menggunakan Terminal.","title":"Go Modules"},{"location":"02go_modules/#inisialisasi-project-menggunakan-go-modules","text":"Konfigurasi go modules mkdir project-name cd project-name go mod init project-name Maka akan terbuat sebuah file dengan nama go.mod yang berisi nama package dan versi golang yang kita pakai. go.mod module project - name go 1.19","title":"Inisialisasi Project menggunakan Go modules"},{"location":"03helloworld/","text":"Program Hello World Untuk mempelajari bahasa pemrograman yang baru biasanya kita harus tahu bagaimana bentuk dari program sederhana hello world . Jika kita sudah paham dengan code sederhana ini, maka kita akan lebih paham untuk mempelajarinya. Code Program Hello World Buat sebuah file dengan nama main.go di dalam folder project kita yang di dalamnya ada file go.mod Program Hello World package main import \"fmt\" func main () { fmt . Println ( \"Hello World\" ) } Output Hello World","title":"Program Hello World"},{"location":"03helloworld/#program-hello-world","text":"Untuk mempelajari bahasa pemrograman yang baru biasanya kita harus tahu bagaimana bentuk dari program sederhana hello world . Jika kita sudah paham dengan code sederhana ini, maka kita akan lebih paham untuk mempelajarinya.","title":"Program Hello World"},{"location":"03helloworld/#code-program-hello-world","text":"Buat sebuah file dengan nama main.go di dalam folder project kita yang di dalamnya ada file go.mod Program Hello World package main import \"fmt\" func main () { fmt . Println ( \"Hello World\" ) } Output Hello World","title":"Code Program Hello World"},{"location":"04komentar/","text":"Komentar Komentar Program adalah tulisan-tulisan atau keterangan-keterangan yang dapat memperjelas detail program yang dibuat oleh programmer. Komentar tidak dianggap sebagai bagian tubuh program, sehingga compiler tidak mengikutsertakan komentar dalam proses compile program. Ada 2 jenis komentar di dalam Go yaitu: inline &multiline. Pada pembahasan kali ini dijelaskan tentang penerapan dan perbedaan jenis komentar ini. Komentar Inline Aturan untuk menulis komentar ini di awali dengan tanda double slash ( // ) kemudian di ikuti dengan pesan komentarnya. Komentar inline ini hanya bisa dilakukan dengan satu baris saja. Jika kita ingin membuatnya lagi maka harus mengetikkan tanda // lagi. Komentar Inline func main () { // Ini adalah komentar // Ini juga merupakan komentar fmt . Println ( \"Ini akan tampil di terminal\" ) // ini merupakan komentar } Komentar Multiline Jika kita ingin menggunakan pesan yang begitu panjang tidak mungkin jika penerapan komentar inline yang akan kita pakai. Maka itu akan susah dan menhabiskan waktu yang lama. Untuk membuat komentar multiline diawali dengan tanda /* dan di akhiri dengan tanda */ . Komentar Multiline func main () { /* Hello saya merupakan komentar dan ini juga pesan komentar bisa banyak baris yang digunakan. */ }","title":"Komentar"},{"location":"04komentar/#komentar","text":"Komentar Program adalah tulisan-tulisan atau keterangan-keterangan yang dapat memperjelas detail program yang dibuat oleh programmer. Komentar tidak dianggap sebagai bagian tubuh program, sehingga compiler tidak mengikutsertakan komentar dalam proses compile program. Ada 2 jenis komentar di dalam Go yaitu: inline &multiline. Pada pembahasan kali ini dijelaskan tentang penerapan dan perbedaan jenis komentar ini.","title":"Komentar"},{"location":"04komentar/#komentar-inline","text":"Aturan untuk menulis komentar ini di awali dengan tanda double slash ( // ) kemudian di ikuti dengan pesan komentarnya. Komentar inline ini hanya bisa dilakukan dengan satu baris saja. Jika kita ingin membuatnya lagi maka harus mengetikkan tanda // lagi. Komentar Inline func main () { // Ini adalah komentar // Ini juga merupakan komentar fmt . Println ( \"Ini akan tampil di terminal\" ) // ini merupakan komentar }","title":"Komentar Inline"},{"location":"04komentar/#komentar-multiline","text":"Jika kita ingin menggunakan pesan yang begitu panjang tidak mungkin jika penerapan komentar inline yang akan kita pakai. Maka itu akan susah dan menhabiskan waktu yang lama. Untuk membuat komentar multiline diawali dengan tanda /* dan di akhiri dengan tanda */ . Komentar Multiline func main () { /* Hello saya merupakan komentar dan ini juga pesan komentar bisa banyak baris yang digunakan. */ }","title":"Komentar Multiline"},{"location":"05variabel/","text":"Variabel Bahasa Go ada dua jenis untuk mendeklarasikan penulisan variabel, ada yang dituliskan tipe datanya dan ada yang tidak. Walaupun caranya berbeda tetapi tujuannya sama, bedanya hanya di penulisannya saja. Mendeklarasi Variabel Dengan Tipe Data Silahkan buat folder project baru terserah apa namanya, lalu masuk ke dalam foldernya dan ketik go mod init nama-project Variabel Dengan Tipe Data package main import \"fmt\" func main () { var namaDepan string = \"Sweet\" var namaBelakang string namaBelakang = \"O`mine\" fmt . Println ( \"Halo\" , namaDepan , namaBelakang ) } Penjelasan Pada kode di atas kita bisa lihat cara penulisan variabel harus menggunakan var dan tipe datanya . Untuk lebih jelasnya bisa perhatikan aturan dibawah ini. Aturan Variabel dengan tipe data var < nama - variabel > < tipe - data > // Atau var < nama - variabel > < tipe - data > = < nilai > Mendeklarasi Variabel Tanpa Tipe Data Go mengadopsi konsep inference yaitu metode untuk mendeklarasikan variabel menurut tipe data dari nilai variabelnya. Dengan metode ini kita tidak perlu menuliskan kode var . Untuk lebih jelasnya mari kita lihat kode dibawah ini. Variabel Tanpa Tipe Data var namaDepan string = \"John\" // Variabel dengan tipe data namaBelakang := \"Cena\" Bisa kita simpulkan untuk membuat sebuah variabel tanpa tipe data kita tidak perlu menuliskan kode var dengan menggunakan kode := dan keyword var dihilangkan. Tipe data dengan nama namaDepan bisa kita lihat tipe datanya adalah bertipe string . Tipe data dengan nama namaBelakang tipe datanya akan otomatis menjadi string , karena nilai dari variabelnya berjenis string. Mendeklarasi Multi Variabel Go juga mendukung metode deklarasi multi variabel secara sekaligus dengan cara menuliskan variabel-variabelnya dengan pembatas tanda koma (,) . Untuk pengisian nilainya boleh juga secara bersamaan dan juga tidak. Multi variabel dengan mengisi nilai secara tidak bersamaan var nama1 , nama2 , nama3 string nama1 = \"John\" nama2 = \"Wick\" nama3 = \"Ente\" Multi variabel dengan mengisi nilai secara bersamaan var nama1 , nama2 , nama3 string = \"John\" , \"Wick\" , \"Ente\" Multi variabel tanpa tipe data nama , umur , berat := \"John\" , 45 , 72.65 Variabel Underscore _ Di bahasa Go memiliki aturan yang berbeda(unik) dari bahasa lain, yaitu tidak boleh ada satupun variabel yang tidak dipakai atau not used . Jadi, semua variabel yang dideklarasikan harus digunakan. Jika tidak maka saat compile program akan muncul pesan error name declared and not used Artinya: variabel dideklarikan tetapi tidak digunakan. Variabel Underscore name , _ := \"John\" , 45 _ := \"Wick\" Variabel name berisikan nilai John sedangkan nilai Wick akan ditampung kedalam variabel underscore (_) , artinya tidak akan pernah digunakan. Jadi apapun variabel underscore itu tidak akan digunakan saat proses compile.","title":"Variabel"},{"location":"05variabel/#variabel","text":"Bahasa Go ada dua jenis untuk mendeklarasikan penulisan variabel, ada yang dituliskan tipe datanya dan ada yang tidak. Walaupun caranya berbeda tetapi tujuannya sama, bedanya hanya di penulisannya saja.","title":"Variabel"},{"location":"05variabel/#mendeklarasi-variabel-dengan-tipe-data","text":"Silahkan buat folder project baru terserah apa namanya, lalu masuk ke dalam foldernya dan ketik go mod init nama-project Variabel Dengan Tipe Data package main import \"fmt\" func main () { var namaDepan string = \"Sweet\" var namaBelakang string namaBelakang = \"O`mine\" fmt . Println ( \"Halo\" , namaDepan , namaBelakang ) }","title":"Mendeklarasi Variabel Dengan Tipe Data"},{"location":"05variabel/#penjelasan","text":"Pada kode di atas kita bisa lihat cara penulisan variabel harus menggunakan var dan tipe datanya . Untuk lebih jelasnya bisa perhatikan aturan dibawah ini. Aturan Variabel dengan tipe data var < nama - variabel > < tipe - data > // Atau var < nama - variabel > < tipe - data > = < nilai >","title":"Penjelasan"},{"location":"05variabel/#mendeklarasi-variabel-tanpa-tipe-data","text":"Go mengadopsi konsep inference yaitu metode untuk mendeklarasikan variabel menurut tipe data dari nilai variabelnya. Dengan metode ini kita tidak perlu menuliskan kode var . Untuk lebih jelasnya mari kita lihat kode dibawah ini. Variabel Tanpa Tipe Data var namaDepan string = \"John\" // Variabel dengan tipe data namaBelakang := \"Cena\" Bisa kita simpulkan untuk membuat sebuah variabel tanpa tipe data kita tidak perlu menuliskan kode var dengan menggunakan kode := dan keyword var dihilangkan. Tipe data dengan nama namaDepan bisa kita lihat tipe datanya adalah bertipe string . Tipe data dengan nama namaBelakang tipe datanya akan otomatis menjadi string , karena nilai dari variabelnya berjenis string.","title":"Mendeklarasi Variabel Tanpa Tipe Data"},{"location":"05variabel/#mendeklarasi-multi-variabel","text":"Go juga mendukung metode deklarasi multi variabel secara sekaligus dengan cara menuliskan variabel-variabelnya dengan pembatas tanda koma (,) . Untuk pengisian nilainya boleh juga secara bersamaan dan juga tidak. Multi variabel dengan mengisi nilai secara tidak bersamaan var nama1 , nama2 , nama3 string nama1 = \"John\" nama2 = \"Wick\" nama3 = \"Ente\" Multi variabel dengan mengisi nilai secara bersamaan var nama1 , nama2 , nama3 string = \"John\" , \"Wick\" , \"Ente\" Multi variabel tanpa tipe data nama , umur , berat := \"John\" , 45 , 72.65","title":"Mendeklarasi Multi Variabel"},{"location":"05variabel/#variabel-underscore-_","text":"Di bahasa Go memiliki aturan yang berbeda(unik) dari bahasa lain, yaitu tidak boleh ada satupun variabel yang tidak dipakai atau not used . Jadi, semua variabel yang dideklarasikan harus digunakan. Jika tidak maka saat compile program akan muncul pesan error name declared and not used Artinya: variabel dideklarikan tetapi tidak digunakan. Variabel Underscore name , _ := \"John\" , 45 _ := \"Wick\" Variabel name berisikan nilai John sedangkan nilai Wick akan ditampung kedalam variabel underscore (_) , artinya tidak akan pernah digunakan. Jadi apapun variabel underscore itu tidak akan digunakan saat proses compile.","title":"Variabel Underscore _"},{"location":"06tipe_data/","text":"Tipe Data Pada bahasa Go mempunyai beberapa jenis tipe data, di antaranya adalah berjenis numerik seperti (desimal ataupun non desimal), string , dan boolean Pada pembelajaran ini akan dijelaskan beberapa tipe data yang telah disediakan oleh Go serta cara penggunaannya. Tipe Data Numerik Non Desimal Tipe data non desimal atau non floating point ada beberapa jenis yaitu: uint adalah tipe data bilangan cacah(bilangan positif) int adalah tipe data bilangan bulat(bilangan positif dan negatif) Nah dari beberapa tipe diatas dibagi lagi menjadi beberapa tipe data berdasarkan maksimal cakupan nilainya, bisa dilihat pada dibawah ini: Jenis Cakupan Bilangan Yang Di Tampung uint8 0 - 255 uint16 0 - 65535 uint32 0 - 4294967295 uint64 0 - 18446744073709551615 uint uint32 / uint64 byte sama dengan uint8 int8 -128 - 127 int16 -32768 - 32767 int32 -2147483648 - 2147483647 int64 -9223372036854775808 - 9223372036854775807 int int32 / int64 rune int32 / int64 Pengembang Go dianjurkan memakai tipe data variabel sebisa mungkin dipilih sesuai dengan jenisnya, karena jika sembarangan saja maka penggunaaan memori akan banyak. var positive uint8 = 88 var negative = - 1243234455 fmt . Printf ( \"Positive: %d\\n\" , positive ) fmt . Printf ( \"Negative: %d\\n\" , negative ) Tipe Data Desimal Untuk tipe data desimal ada dua jenis yaitu float32 dan float64 sama dengan tipe data numerik non desimal mempunyai nilai lebar cakupan yang bisa di tampung. bilanganDesimal := 5.532 fmt . Printf ( \"Bilangan Desimal: %f\\n\" , bilanganDesimal ) fmt . Printf ( \"Bilangan Desimal: %.2f\\n\" , bilanganDesimal ) Tipe Data Boolean Tipe data boolean mempunyai nilai true dan false . Contoh Boolean var isAuthenticated bool = true fmt . Printf ( \"Authenticated: %t\\n\" , isAuthenticated ) Gunakan %t untuk format data bool jika menggunakan fmt.Printf() Nilai nil dan zero Keyword nil sebenarnya bukanlah tipe data tetapi adalah sebuah nilai. Variabel yang mempunyai nilai nil berarti variabel itu tidak memiliki nilai sama sekali atau kosong. Semua tipe data diatas memiliki nilai nil atau nilai default. Jadi meskipun kita sudah mendeklarikan dengan nilai awal, tetapi dia mempunyai nilai default yaitu nil Zero value untuk string adalah \"\" Zero value untuk bool adalah false Zero value untuk numerik non desimal maupun numerik desimal adalah 0 CATATAN : Zero value berbeda dengan nilai nil . Nil merupakan nilai yang kosong, sangat-sangat kosong. Nilai nil tidak bisa digunakan pada tipe data diatas. Nilai nil hanya bisa digunakan pada: pointer fungsi slice map channel interface yang kosong any (alias interface)","title":"Tipe Data"},{"location":"06tipe_data/#tipe-data","text":"Pada bahasa Go mempunyai beberapa jenis tipe data, di antaranya adalah berjenis numerik seperti (desimal ataupun non desimal), string , dan boolean Pada pembelajaran ini akan dijelaskan beberapa tipe data yang telah disediakan oleh Go serta cara penggunaannya.","title":"Tipe Data"},{"location":"06tipe_data/#tipe-data-numerik-non-desimal","text":"Tipe data non desimal atau non floating point ada beberapa jenis yaitu: uint adalah tipe data bilangan cacah(bilangan positif) int adalah tipe data bilangan bulat(bilangan positif dan negatif) Nah dari beberapa tipe diatas dibagi lagi menjadi beberapa tipe data berdasarkan maksimal cakupan nilainya, bisa dilihat pada dibawah ini: Jenis Cakupan Bilangan Yang Di Tampung uint8 0 - 255 uint16 0 - 65535 uint32 0 - 4294967295 uint64 0 - 18446744073709551615 uint uint32 / uint64 byte sama dengan uint8 int8 -128 - 127 int16 -32768 - 32767 int32 -2147483648 - 2147483647 int64 -9223372036854775808 - 9223372036854775807 int int32 / int64 rune int32 / int64 Pengembang Go dianjurkan memakai tipe data variabel sebisa mungkin dipilih sesuai dengan jenisnya, karena jika sembarangan saja maka penggunaaan memori akan banyak. var positive uint8 = 88 var negative = - 1243234455 fmt . Printf ( \"Positive: %d\\n\" , positive ) fmt . Printf ( \"Negative: %d\\n\" , negative )","title":"Tipe Data Numerik Non Desimal"},{"location":"06tipe_data/#tipe-data-desimal","text":"Untuk tipe data desimal ada dua jenis yaitu float32 dan float64 sama dengan tipe data numerik non desimal mempunyai nilai lebar cakupan yang bisa di tampung. bilanganDesimal := 5.532 fmt . Printf ( \"Bilangan Desimal: %f\\n\" , bilanganDesimal ) fmt . Printf ( \"Bilangan Desimal: %.2f\\n\" , bilanganDesimal )","title":"Tipe Data Desimal"},{"location":"06tipe_data/#tipe-data-boolean","text":"Tipe data boolean mempunyai nilai true dan false . Contoh Boolean var isAuthenticated bool = true fmt . Printf ( \"Authenticated: %t\\n\" , isAuthenticated ) Gunakan %t untuk format data bool jika menggunakan fmt.Printf()","title":"Tipe Data Boolean"},{"location":"06tipe_data/#nilai-nil-dan-zero","text":"Keyword nil sebenarnya bukanlah tipe data tetapi adalah sebuah nilai. Variabel yang mempunyai nilai nil berarti variabel itu tidak memiliki nilai sama sekali atau kosong. Semua tipe data diatas memiliki nilai nil atau nilai default. Jadi meskipun kita sudah mendeklarikan dengan nilai awal, tetapi dia mempunyai nilai default yaitu nil Zero value untuk string adalah \"\" Zero value untuk bool adalah false Zero value untuk numerik non desimal maupun numerik desimal adalah 0 CATATAN : Zero value berbeda dengan nilai nil . Nil merupakan nilai yang kosong, sangat-sangat kosong. Nilai nil tidak bisa digunakan pada tipe data diatas. Nilai nil hanya bisa digunakan pada: pointer fungsi slice map channel interface yang kosong any (alias interface)","title":"Nilai nil dan zero"}]}